    <div id="pure-storage-table" class="section pure-storage-table">
        <h2 class="title">Protection Group VM</h2>
        <!-- <link rel="stylesheet" href="styles.css"> -->
        <% if (protectionGroups && protectionGroups.length > 0) { %>
            <div class="protection-group-list">
                <% protectionGroups.forEach(pg => { %>
                    <div class="protection-group-entry">
                        <div class="pg-header" onclick="toggleAccordion('<%= pg.id %>', event)">
                            <span class="pg-name"><%= pg.name %></span>
                        </div>
                        <form action="/protection/delete-protection-group/<%= pg.id %>" method="POST" style="display: inline;">
                            <button type="submit" class="delete-btn">Delete</button>
                        </form>

                        <% 
                            let snapshotItems = (snapshots[pg.name] && Array.isArray(snapshots[pg.name].items)) ? snapshots[pg.name].items : []; 
                            let latestSnapshot = null; // Declare latestSnapshot at the start

                            if (snapshotItems.length > 0) { 
                                snapshotItems.sort((a, b) => new Date(b.created) - new Date(a.created)); // Sort latest first
                                latestSnapshot = snapshotItems[0]; // Assign latest snapshot
                            } 
                        %>

                        <!-- Accordion content -->
                        <div id="pg-<%= pg.id %>" class="accordion-content">
                        
                            <% if (snapshotItems.length > 0) { %>
                                <input type="text" class="snapshot-search" placeholder="Filter snapshots..." onkeyup="filterSnapshots(this, '<%= pg.id %>')">

                                <div class="snapshot-table-container">
                                    <table class="snapshot-table">
                                        <thead>
                                            <tr>
                                                <th>Select</th>
                                                <th>Snapshot Name</th>
                                                <th onclick="sortTable(this, '<%= pg.id %>')" class="sortable" data-asc="true">Creation Time ⬍</th>
                                                <th>Size</th>
                                                <th>Restore</th>
                                            </tr>
                                        </thead>
                                        <tbody id="snapshot-body-<%= pg.id %>">
                                            <% snapshotItems.forEach((snapshot, index) => { %>
                                                <tr>
                                                    <td>
                                                        <input type="checkbox" class="snapshot-checkbox" value="<%= snapshot.name %>" onchange="toggleRestoreAllButton()">
                                                    </td>
                                                    <td><%= snapshot.name %></td>
                                                    <td data-time="<%= snapshot.created %>"><%= new Date(snapshot.created).toLocaleString() %></td>
                                                    <td><%= (snapshot.space.snapshots / (1024*1024)).toFixed(2) %> MB %></td>
                                                    <td>
                                                        <input type="text" class="restore-input" id="restore-name-<%= snapshot.name %>" placeholder="New Volume Name">
                                                        <button class="restore-btn" onclick="restoreSnapshot('<%= snapshot.name %>')">Restore</button>
                                                    </td>
                                                </tr>
                                            <% }) %>
                                        </tbody>
                                    </table>
                                </div>
                            <% } else { %>
                                <p class="no-snapshots">No snapshots found</p>
                            <% } %>
                        </div>
                    </div>
                <% }) %>
            </div>
            <button id="restore-all-btn" class="restore-btn" style="display: none;" onclick="restoreAllSnapshots()">Restore Selected</button>
        <% } else { %>
            <p>No Protection Groups available.</p>
        <% } %>
        <a href="/protection/add-protection-group" class="add-btn">Add Protection Group VM</a>
    </div>


    <style>
        .accordion-button {
            background-color: #007bff;  /* Set background color */
            color: white;  /* Set text color */
            font-weight: bold;  /* Make text bold */
        }

        .accordion-button:not(.collapsed) {
            background-color: #0056b3; /* Darker background when expanded */
            color: white;
        }

        .accordion-body {
            background-color: #f8f9fa;  /* Set background color */
            font-size: 1.1rem;  /* Make text slightly larger */
            padding: 20px;  /* Add more padding */

        }

        .accordion-item {
            border-radius: 8px;  /* Rounded corners */
            margin-bottom: 10px;  /* Space between items */
            border: 1px solid #ddd;  /* Light border around accordion items */
        }

        .accordion-button {
            border-radius: 8px;  /* Rounded corners for button */
        }

        .pure-storage-table {
            max-width: 2000px;
            margin: 0 auto;
        }

        .pg-header {
            cursor: pointer;
            background: linear-gradient(135deg, white, orange);
            color: white;
            padding: 15px;
            font-size: 18px;
            font-weight: 600;
            border-radius: 6px;
            margin-bottom: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background 0.3s, transform 0.2s ease-in-out;
        }

        .pg-header:hover {
            background: #FFD580;
            transform: scale(1.02);
        }

        .pg-header::after {
            content: "▼";  /* Down arrow */
            font-size: 16px;
            transition: transform 0.2s;
        }
        .pg-header.active::after {
            transform: rotate(180deg);  /* Rotate when expanded */
        }

        .accordion-content {
            display: none;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            animation: fadeIn 0.3s ease-in-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-5px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .sortable {
            cursor: pointer;
            color: blue;
            text-decoration: underline;
        }

        .restore-btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 5px;
            width: 100%;
            box-sizing: border-box;
            transition: background-color 0.2s ease;
        }

        .restore-btn:hover {
            background-color: #27ae60;
        }

        .restore-input {
            width: calc(100% - 10px);
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 5px;
        }

        .snapshot-search {
            margin-bottom: 10px;
            padding: 5px;
            width: 100%;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .snapshot-table-container {
            max-height: 250px;
            overflow-y: auto;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .snapshot-table {
            width: 100%;
            border-collapse: collapse;
        }

        .snapshot-table thead {
            position: sticky;
            top: 0;
            background: white;
        }

        .latest-snapshot-row {
            background-color: #f0f8ff; /* Light blue */
            font-weight: bold;
        }

    </style>

    <script>
        /*function toggleAccordion(pgId, event) {
            // Prevent the accordion toggle if the delete button was clicked
            if (event.target.classList.contains('delete-btn')) {
                return;
            }

            const content = document.getElementById(`pg-${pgId}`);
            const isVisible = content.style.display === 'block';

            // Toggle the current section's visibility
            content.style.display = isVisible ? 'none' : 'block';
        }*/

        function toggleAccordion(pgId, event) {
            if (event.target.classList.contains('delete-btn')) {
                return;
            }

            const content = document.getElementById(`pg-${pgId}`);
            const header = event.currentTarget;
            const isVisible = content.style.display === 'block';

            content.style.display = isVisible ? 'none' : 'block';
            header.classList.toggle('active', !isVisible);  // Toggle arrow rotation
        }



        function toggleRestoreAllButton() {
            let anyChecked = document.querySelectorAll(".snapshot-checkbox:checked").length > 0;
            document.getElementById("restore-all-btn").style.display = anyChecked ? "block" : "none";
        }

        function filterSnapshots(input, pgId) {
            let filter = input.value.toLowerCase();
            let table = document.getElementById("snapshot-body-" + pgId);
            let rows = table.getElementsByTagName("tr");
            
            for (let row of rows) {
                let snapshotName = row.cells[1].textContent.toLowerCase();
                row.style.display = snapshotName.includes(filter) ? "" : "none";
            }
        }

        async function restoreSnapshot(snapshotName) {
            let newVolumeName = document.getElementById(`restore-name-${snapshotName}`).value.trim();

            if (!newVolumeName) {
                alert("Please enter a new volume name.");
                return;
            }

            if (!confirm(`Are you sure you want to restore snapshot "${snapshotName}" as volume "${newVolumeName}"?`)) {
                return;
            }

            try {
                const response = await fetch('/protection/restore-snapshot', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ snapshotName, newVolumeName })
                });

                const data = await response.json();

                if (data.error) {
                    alert(`Error: ${data.error}`);
                } else {
                    alert(`Success: ${data.message}`);
                    location.reload();
                }
            } catch (error) {
                console.error("Restore failed:", error);
                alert("An error occurred while restoring the snapshot.");
            }
        }

        async function restoreAllSnapshots() {
            let selectedSnapshots = document.querySelectorAll(".snapshot-checkbox:checked");
            let restoreData = [];

            selectedSnapshots.forEach(snapshot => {
                let newVolumeName = document.getElementById(`restore-name-${snapshot.value}`).value.trim();
                if (newVolumeName) {
                    restoreData.push({ snapshotName: snapshot.value, newVolumeName });
                }
            });

            if (restoreData.length === 0) {
                alert("Please enter new volume names for selected snapshots.");
                return;
            }

            let confirmMessage = "Are you sure you want to restore the following snapshots?\n\n";
            restoreData.forEach(item => {
                confirmMessage += `Snapshot: ${item.snapshotName} → Volume: ${item.newVolumeName}\n`;
            });

            if (!confirm(confirmMessage)) {
                return;
            }

            try {
                for (let restoreItem of restoreData) {
                    await fetch('/protection/restore-snapshot', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(restoreItem)
                    });
                }

                alert("All selected snapshots have been restored successfully.");
                location.reload();
            } catch (error) {
                console.error("Bulk restore failed:", error);
                alert("An error occurred while restoring the snapshots.");
            }
        }

        function sortTable(header, pgId) {
            let tableBody = document.getElementById(`snapshot-body-${pgId}`);
            let rows = Array.from(tableBody.querySelectorAll("tr"));
            let ascending = header.getAttribute("data-asc") === "true";

            rows.sort((rowA, rowB) => {
                let timeA = parseInt(rowA.querySelector("td[data-time]").getAttribute("data-time"), 10);
                let timeB = parseInt(rowB.querySelector("td[data-time]").getAttribute("data-time"), 10);

                return ascending ? timeA - timeB : timeB - timeA;
            });

            rows.forEach(row => tableBody.appendChild(row));

            header.setAttribute("data-asc", ascending ? "false" : "true");
            header.textContent = `Creation Time ${ascending ? '⬍' : '⬎'}`;
        }
        function confirmDelete(event, pgId) {
            event.preventDefault();  // Prevent form submission

            if (confirm("Are you sure you want to delete this Protection Group?")) {
                const entry = event.target.closest(".protection-group-entry");

                // Fade out effect before deletion
                entry.style.animation = "fadeOut 0.3s forwards";

                setTimeout(() => {
                    event.target.form.submit(); // Submit after animation
                }, 300);
            }
        }

    </script>
